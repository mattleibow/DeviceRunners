name: TCP Android Test

on:
  pull_request:
  push:
    branches: [ main, 'releases/**' ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  android:
    strategy:
      fail-fast: false
      matrix:
        platform: 
          - name: Linux
            os: ubuntu-22.04
            gpu: swiftshader_indirect
          - name: macOS
            os: macos-13
            gpu: guest
    name: Android (${{ matrix.platform.name }})
    runs-on: ${{ matrix.platform.os }}
    env:
      TEST_TARGET_FRAMEWORK: net9.0-android
      TEST_RUNTIME_IDENTIFIER: android-x64
      TEST_CONFIGURATION: Release
      TEST_EMULATOR_NAME: TCPTestEmulator
      TEST_EMULATOR_IMAGE: system-images;android-34;google_apis;x86_64
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Required Tools
      uses: ./.github/workflows/setup-tools
      with:
        xcode-version: '15.2'
    - uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '21'
    - name: Build and Install CLI Tool
      run: |
        dotnet pack src/DeviceRunners.Cli/DeviceRunners.Cli.csproj -c Release
        dotnet tool install --global --add-source src/DeviceRunners.Cli/bin/Release DeviceRunners.Cli
    - name: Install Android SDK Packages
      run: dotnet android sdk install --package 'platform-tools' --package 'emulator' --package '${{ env.TEST_EMULATOR_IMAGE }}'
    - name: Create Emulator
      run: dotnet android avd create --name ${{ env.TEST_EMULATOR_NAME }} --sdk '${{ env.TEST_EMULATOR_IMAGE }}' --force
    - name: Enable KVM
      if: runner.os == 'Linux'
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
    - name: Start Emulator
      run: dotnet android avd start --name ${{ env.TEST_EMULATOR_NAME }} --gpu ${{ matrix.platform.gpu }} --wait-boot --no-window --no-snapshot --no-audio --no-boot-anim
    - name: Publish App
      run: |
        dotnet publish sample/test/DeviceTestingKitApp.DeviceTests/DeviceTestingKitApp.DeviceTests.csproj \
          -f ${{ env.TEST_TARGET_FRAMEWORK }} \
          -r ${{ env.TEST_RUNTIME_IDENTIFIER }} \
          -c ${{ env.TEST_CONFIGURATION }} \
          -p:TestingMode=NonInteractiveVisual \
          -p:AndroidSdkDirectory=$ANDROID_SDK_ROOT \
          /bl:./artifacts/logs/msbuild-publish.binlog
    - name: Install App
      run: |
        $ANDROID_SDK_ROOT/platform-tools/adb install sample/test/DeviceTestingKitApp.DeviceTests/bin/${{ env.TEST_CONFIGURATION }}/${{ env.TEST_TARGET_FRAMEWORK }}/${{ env.TEST_RUNTIME_IDENTIFIER }}/publish/com.companyname.devicetestingkitapp.devicetests-Signed.apk
    - name: Start TCP Listener and Run Tests
      run: |
        # Create artifacts directory
        mkdir -p artifacts
        
        # Start TCP listener in background
        echo "Starting TCP listener on port 16384..."
        device-runners listen --port 16384 --results-file artifacts/tcp-test-results.txt --non-interactive &
        LISTENER_PID=$!
        
        # Wait a moment for listener to start
        sleep 3
        
        # Launch the app
        echo "Launching test app..."
        $ANDROID_SDK_ROOT/platform-tools/adb shell am start -n com.companyname.devicetestingkitapp.devicetests/.MainActivity
        
        # Wait for tests to complete (10 minute timeout)
        timeout_seconds=600
        elapsed=0
        
        echo "Waiting for test results via TCP..."
        while [ $elapsed -lt $timeout_seconds ]; do
          if [ -f "artifacts/tcp-test-results.txt" ] && [ -s "artifacts/tcp-test-results.txt" ]; then
            echo "TCP results received!"
            break
          fi
          sleep 5
          elapsed=$((elapsed + 5))
          if [ $((elapsed % 60)) -eq 0 ]; then
            echo "Still waiting... ($elapsed/$timeout_seconds seconds)"
          fi
        done
        
        # Stop the TCP listener
        echo "Stopping TCP listener..."
        kill $LISTENER_PID 2>/dev/null || true
        wait $LISTENER_PID 2>/dev/null || true
        
        # Check if we got results
        if [ -f "artifacts/tcp-test-results.txt" ] && [ -s "artifacts/tcp-test-results.txt" ]; then
          echo "Analyzing TCP test results..."
          echo "--- TCP Results ---"
          cat artifacts/tcp-test-results.txt
          echo "--- End TCP Results ---"
          
          # Parse test results to determine exit code
          # Look for patterns like "Tests run: X Passed: Y Failed: Z"
          if grep -q "Failed: 0" artifacts/tcp-test-results.txt; then
            echo "All tests passed!"
            exit 0
          elif grep -qE "Failed: [1-9][0-9]*" artifacts/tcp-test-results.txt; then
            echo "Some tests failed!"
            exit 1
          else
            echo "Could not determine test results from TCP output"
            echo "Assuming failure due to unknown result format"
            exit 1
          fi
        else
          echo "No TCP results received within timeout period"
          exit 1
        fi
    - name: Shutdown the Emulator
      if: always()
      run: $ANDROID_SDK_ROOT/platform-tools/adb -- emu kill
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: Test Results - ${{ matrix.platform.name }}
        path: ./artifacts