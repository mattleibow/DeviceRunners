@page "/result/{id:int}"
@using DeviceRunners.VisualRunners
@inject NavigationManager Navigation

<PageTitle>Test Result</PageTitle>

<div class="container">
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/assembly/@AssemblyId">Test Assembly</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Test Result</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (ViewModel != null)
    {
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h4 style="color: @GetStatusColor(ViewModel.ResultStatus)">
                            @(ViewModel.TestCase?.DisplayName ?? "Test Result")
                        </h4>
                        <span class="badge @GetStatusBadgeClass(ViewModel.ResultStatus)">
                            @ViewModel.ResultStatus
                        </span>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
                        {
                            <h6>Message:</h6>
                            <div class="alert alert-info">
                                <pre>@ViewModel.ErrorMessage</pre>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(ViewModel.Output))
                        {
                            <h6>Output:</h6>
                            <div class="alert alert-secondary">
                                <pre>@ViewModel.Output</pre>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(ViewModel.ErrorStackTrace))
                        {
                            <h6>Stack Trace:</h6>
                            <div class="alert alert-danger">
                                <pre>@ViewModel.ErrorStackTrace</pre>
                            </div>
                        }

                        @if (ViewModel.Duration != TimeSpan.Zero)
                        {
                            <p><strong>Duration:</strong> @ViewModel.Duration.TotalMilliseconds ms</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            Test result not found.
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    
    private TestResultViewModel? ViewModel { get; set; }
    private int AssemblyId { get; set; }

    protected override void OnParametersSet()
    {
        // In a real implementation, you would look up the TestResultViewModel by ID
        // For now, this is just a placeholder structure
        // ViewModel = GetTestResultById(Id);
        // AssemblyId = GetAssemblyIdForResult(Id);
    }

    private string GetStatusColor(TestResultStatus status)
    {
        return status switch
        {
            TestResultStatus.Passed => "#28a745",
            TestResultStatus.Failed => "#dc3545",
            TestResultStatus.Skipped => "#ffc107",
            _ => "#6c757d"
        };
    }

    private string GetStatusBadgeClass(TestResultStatus status)
    {
        return status switch
        {
            TestResultStatus.Passed => "bg-success",
            TestResultStatus.Failed => "bg-danger",
            TestResultStatus.Skipped => "bg-warning",
            _ => "bg-secondary"
        };
    }
}