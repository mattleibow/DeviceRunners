@page "/"
@using DeviceRunners.VisualRunners
@using System.IO
@inject HomeViewModel ViewModel
@inject IJSRuntime JSRuntime

<PageTitle>Test Runner</PageTitle>

<div class="container">
    <div class="row mb-3">
        <div class="col">
            <h3>Test Assemblies:</h3>
        </div>
        <div class="col-auto">
            <button class="btn btn-success" @onclick="RunAllTests" disabled="@ViewModel.IsBusy">
                Run All â–ºâ–º
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col">
            @if (ViewModel.TestAssemblies.Any())
            {
                <div class="list-group">
                    @foreach (var assembly in ViewModel.TestAssemblies)
                    {
                        <a href="/assembly/@Uri.EscapeDataString(Path.GetFileNameWithoutExtension(assembly.TestAssemblyInfo.AssemblyFileName))" class="list-group-item list-group-item-action">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1 @GetStatusCssClass(assembly.ResultStatus)">@assembly.DisplayName</h5>
                            </div>
                            <div class="d-flex gap-3">
                                <span class="text-success">âœ” @assembly.Passed</span>
                                <span class="text-danger">â›” @assembly.Failed</span>
                                <span class="text-warning">âš  @assembly.Skipped</span>
                                <span class="text-muted">ðŸ”· @assembly.NotRun</span>
                            </div>
                        </a>
                    }
                </div>
            }
            else if (!ViewModel.IsLoaded)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Scanning for test assemblies...</p>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    No test assemblies found.
                </div>
            }
        </div>
    </div>

    @if (ViewModel.Diagnostics?.MessagesString is { } messages && !string.IsNullOrEmpty(messages))
    {
        <div class="row mt-4">
            <div class="col">
                <h4>Diagnostic Messages:</h4>
                <div class="border p-3" style="max-height: 300px; overflow-y: auto;">
                    <pre>@messages</pre>
                </div>
            </div>
        </div>
    }

    @if (ViewModel.IsBusy)
    {
        <div class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center" style="background: rgba(0,0,0,0.5); z-index: 1050;">
            <div class="spinner-border text-light" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Running tests...</span>
            </div>
        </div>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (ViewModel != null)
            await ViewModel.StartAssemblyScanAsync();
    }

    private async Task RunAllTests()
    {
        if (ViewModel?.RunEverythingCommand?.CanExecute(null) == true)
        {
            ViewModel.RunEverythingCommand.Execute(null);
        }
    }

    private string GetStatusCssClass(TestResultStatus status)
    {
        return status switch
        {
            TestResultStatus.Passed => "test-result-status-passed",
            TestResultStatus.Failed => "test-result-status-failed",
            TestResultStatus.Skipped => "test-result-status-skipped",
            _ => "test-result-status-notrun"
        };
    }
}